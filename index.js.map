{"version":3,"file":"index.js","sources":["../src/js/1-header-hero.js","../src/js/api.js","../src/js/5-artist-modal.js"],"sourcesContent":["// MOBILE MENU\nconst burgerBtn = document.getElementById('burgerBtn');\nconst mobileMenu = document.getElementById('mobileMenu');\nconst closeBtn = document.getElementById('closeBtn');\nconst links = mobileMenu.querySelectorAll('a');\n\nburgerBtn.addEventListener('click', () => {\n  mobileMenu.classList.add('active');\n});\n\ncloseBtn.addEventListener('click', () => {\n  mobileMenu.classList.remove('active');\n});\n\nlinks.forEach(link => {\n  link.addEventListener('click', () => {\n    mobileMenu.classList.remove('active');\n  });\n});\n\n// SMOOTH SCROLL\ndocument.querySelectorAll('a[href^=\"#\"]').forEach(anchor => {\n  anchor.addEventListener('click', function (e) {\n    e.preventDefault();\n\n    const targetId = this.getAttribute('href');\n    const targetElement = document.querySelector(targetId);\n\n    if (targetElement) {\n      targetElement.scrollIntoView({\n        behavior: 'smooth',\n        block: 'start',\n      });\n    }\n  });\n});\n","import axios from 'axios';\n\nconst api = axios.create({\n  baseURL: 'https://sound-wave.b.goit.study/api',\n  timeout: 5000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\nconst BASE_URL = 'https://sound-wave.b.goit.study/api';\n\nexport async function fetchArtists({ page = 1, limit = 8 } = {}) {\n  try {\n    const response = await api.get('/artists', {\n      params: { page, limit },\n    });\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function getArtistById(id) {\n  try {\n    const response = await axios.get(`${BASE_URL}/artists/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error(`Failed to fetch artist with ID ${id}:`, error);\n    throw error;\n  }\n}\n\nexport async function getAlbumsByArtistId(artistId) {\n  try {\n    const response = await axios.get(`${BASE_URL}/artists/${artistId}/albums`);\n    return response.data;\n  } catch (error) {\n    console.error(`Failed to fetch albums for artist ${artistId}:`, error);\n    throw error;\n  }\n}\n\nexport async function getAlbumById(albumId) {\n  try {\n    const response = await axios.get(`${BASE_URL}/albums/${albumId}`);\n    return response.data;\n  } catch (error) {\n    console.error(`Failed to fetch album with ID ${albumId}:`, error);\n    throw error;\n  }\n}\n","import { getArtistById } from './api.js';\nimport spritePath from '../img/icons.svg?url';\n\nconst modalSection = document.querySelector('.artist-modal-backdrop');\nconst modalOverlay = modalSection.querySelector('.artist-modal-window');\nconst modalContent = modalSection.querySelector('.artist-modal-content');\nconst closeModalBtn = modalSection.querySelector('.artist-modal-close-btn');\nconst loader = document.getElementById('artistModalLoader');\n\nfunction handleEscKey(event) {\n  if (event.key === 'Escape') {\n    closeModal();\n  }\n}\n\nfunction handleOverlayClick(event) {\n  if (event.target === modalSection) {\n    closeModal();\n  }\n}\n\nfunction createInfoBlock(title, content) {\n  if (!content) return null;\n\n  const box = document.createElement('div');\n  box.className = 'folder-box';\n\n  const titleEl = document.createElement('h3');\n  titleEl.className = 'years-title';\n  titleEl.textContent = title;\n\n  const contentEl = document.createElement('p');\n  contentEl.className = 'years-item';\n  contentEl.textContent = content;\n\n  box.appendChild(titleEl);\n  box.appendChild(contentEl);\n  return box;\n}\n\nfunction createGenreTags(genres) {\n  if (!genres || !Array.isArray(genres) || genres.length === 0) return null;\n\n  const container = document.createElement('div');\n  container.className = 'janr';\n\n  genres.forEach(genre => {\n    const tag = document.createElement('p');\n    tag.className = 'janr-item';\n    tag.textContent = genre;\n    container.appendChild(tag);\n  });\n\n  return container;\n}\n\nfunction formatDuration(duration) {\n  if (!duration || isNaN(duration)) return '--:--';\n\n  // Convert duration from milliseconds to seconds\n  const seconds = duration > 1000 ? Math.round(duration / 1000) : duration;\n\n  const minutes = Math.floor(seconds / 60);\n  const remainingSeconds = seconds % 60;\n  return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\n}\n\nfunction transformTracksToAlbums(tracksList) {\n  if (!Array.isArray(tracksList) || tracksList.length === 0) {\n    return [];\n  }\n\n  const albumsMap = new Map();\n\n  tracksList.forEach(track => {\n    if (!track.strAlbum) return;\n\n    if (!albumsMap.has(track.strAlbum)) {\n      albumsMap.set(track.strAlbum, {\n        strAlbum: track.strAlbum,\n        tracks: [],\n      });\n    }\n\n    // Transform track data and handle YouTube URL\n    const youtubeUrl =\n      track.movie ||\n      (track.strTrackThumb && track.strTrackThumb.replace('/preview', '')) ||\n      null;\n\n    albumsMap.get(track.strAlbum).tracks.push({\n      strTrack: track.strTrack,\n      intDuration: track.intDuration,\n      strMusicVid: youtubeUrl,\n    });\n  });\n\n  return Array.from(albumsMap.values());\n}\n\nfunction createTrackList(tracks) {\n  if (!Array.isArray(tracks) || tracks.length === 0) {\n    return null;\n  }\n\n  const container = document.createElement('div');\n  container.className = 'tracks-container';\n\n  // Create header\n  const header = document.createElement('ul');\n  header.className = 'track-name';\n  header.innerHTML = `\n    <li class=\"name-column-item item-col-1\">Track</li>\n    <li class=\"name-column-item item-col-2\">Time</li>\n    <li class=\"name-column-item item-col-3\">Link</li>\n  `;\n  container.appendChild(header);\n\n  // Create tracks\n  tracks.forEach((track, index) => {\n    const trackRow = document.createElement('ul');\n    trackRow.className = 'track-name';\n\n    const nameCol = document.createElement('li');\n    nameCol.className = 'track-name-item item-col-1';\n    nameCol.textContent = track.strTrack || 'Untitled';\n\n    const timeCol = document.createElement('li');\n    timeCol.className = 'track-name-item item-col-2';\n    timeCol.textContent = formatDuration(track.intDuration);\n\n    const linkCol = document.createElement('li');\n    linkCol.className = 'track-name-item item-col-3';\n\n    if (track.strMusicVid) {\n      const link = document.createElement('a');\n      link.href = track.strMusicVid;\n      link.target = '_blank';\n      link.rel = 'noopener noreferrer';\n      link.title = `Watch ${track.strTrack} on YouTube`;\n      link.innerHTML = `\n        <svg class=\"icon-youtube\" width=\"24\" height=\"24\">\n          <use href=\"${spritePath}#icon-Youtube\"></use>\n        </svg>\n      `;\n\n      link.className = 'youtube-link';\n\n      linkCol.appendChild(link);\n    }\n\n    trackRow.appendChild(nameCol);\n    trackRow.appendChild(timeCol);\n    trackRow.appendChild(linkCol);\n    container.appendChild(trackRow);\n  });\n\n  return container;\n}\n\nfunction createAlbumSection(albums) {\n  if (!Array.isArray(albums) || albums.length === 0) {\n    return null;\n  }\n\n  const container = document.createElement('div');\n  container.className = 'album-box';\n\n  const title = document.createElement('h2');\n  title.className = 'album-title';\n  title.textContent = 'Albums';\n  container.appendChild(title);\n\n  const albumsContainer = document.createElement('div');\n  albumsContainer.className = 'albums-grid';\n\n  albums.forEach(album => {\n    const albumBox = document.createElement('div');\n    albumBox.className = 'album-title-box';\n\n    const albumTitle = document.createElement('h3');\n    albumTitle.className = 'name-album';\n    albumTitle.textContent = album.strAlbum || 'Untitled Album';\n    albumBox.appendChild(albumTitle);\n\n    if (album.tracks && Array.isArray(album.tracks)) {\n      const trackList = createTrackList(album.tracks);\n      if (trackList) {\n        albumBox.appendChild(trackList);\n      }\n    }\n\n    container.appendChild(albumBox);\n  });\n\n  return container;\n}\n\nfunction renderModalContent(data) {\n  modalContent.innerHTML = '';\n\n  // Transform tracksList into albums structure\n  const albumsData = transformTracksToAlbums(data.tracksList);\n\n  // Add close button\n  const closeBtn = document.createElement('button');\n  closeBtn.className = 'modal-close-btn';\n  closeBtn.type = 'button';\n  closeBtn.innerHTML = `\n    <svg class=\"icon\" width=\"24\" height=\"24\">\n      <use href=\"./img/icons.svg#icon-close\"></use>\n    </svg>\n  `;\n  /*----------------------------------*/\n\n  closeBtn.addEventListener('click', e => {\n    closeModal();\n  });\n  /*----------------------------------*/\n  modalContent.appendChild(closeBtn);\n\n  // Add artist name\n  const titleName = document.createElement('h2');\n  titleName.className = 'title-name';\n  titleName.textContent = data.strArtist;\n  modalContent.appendChild(titleName);\n\n  // Create artist info container\n  const artistInfoContainer = document.createElement('div');\n  artistInfoContainer.className = 'artist-info-container';\n\n  // Add artist photo\n  if (data.strArtistThumb) {\n    const photo = document.createElement('img');\n    photo.className = 'artist-photo';\n    photo.src = data.strArtistThumb;\n    photo.alt = data.strArtist;\n    artistInfoContainer.appendChild(photo);\n  }\n\n  // Create folder for artist info\n  const folder = document.createElement('div');\n  folder.className = 'folder';\n\n  // Create container for key info (first 4 items)\n  const keyInfoContainer = document.createElement('div');\n  keyInfoContainer.className = 'key-info-container';\n\n  // Add key information blocks\n  const keyInfoBlocks = [\n    {\n      title: 'Years active',\n      content: data.intFormedYear ? `${data.intFormedYear}â€“present` : undefined,\n    },\n    {\n      title: 'Sex',\n      content: data.strGender,\n    },\n    {\n      title: 'Members',\n      content: data.intMembers || '1',\n    },\n    {\n      title: 'Country',\n      content: data.strCountry,\n    },\n  ];\n\n  keyInfoBlocks.forEach(block => {\n    const infoBlock = createInfoBlock(block.title, block.content);\n    if (infoBlock) {\n      keyInfoContainer.appendChild(infoBlock);\n    }\n  });\n\n  folder.appendChild(keyInfoContainer);\n\n  // Add biography separately\n  const biographyBlock = createInfoBlock('Biography', data.strBiographyEN);\n  if (biographyBlock) {\n    biographyBlock.className = 'folder-box biography';\n    folder.appendChild(biographyBlock);\n  }\n\n  // Add genres\n  if (data.genres && Array.isArray(data.genres)) {\n    const genresTags = createGenreTags(data.genres);\n    if (genresTags) {\n      folder.appendChild(genresTags);\n    }\n  }\n\n  // Add folder to artist info container\n  artistInfoContainer.appendChild(folder);\n  modalContent.appendChild(artistInfoContainer);\n\n  // Add albums section\n  if (albumsData.length > 0) {\n    const albumsSection = createAlbumSection(albumsData);\n    if (albumsSection) {\n      modalContent.appendChild(albumsSection);\n    }\n  } else {\n    console.log('No albums data found or invalid format');\n  }\n}\n\nasync function openModal(id) {\n  try {\n    modalSection.classList.remove('visually-hidden');\n    // Show loader\n    document.body.style.overflow = 'hidden';\n    if (loader) {\n      loader.style.display = 'block';\n    }\n    // Fetch data\n    const data = await getArtistById(id);\n    // Hide loader\n    if (loader) {\n      loader.style.display = 'none';\n    }\n    // Render content\n    renderModalContent(data);\n    document.addEventListener('keydown', handleEscKey);\n    modalSection.addEventListener('click', handleOverlayClick);\n    if (closeModalBtn) {\n      closeModalBtn.addEventListener('click', closeModal);\n    }\n  } catch (error) {\n    console.error('Error opening modal:', error);\n    closeModal();\n  }\n}\n\nfunction closeModal() {\n  document.body.style.overflow = '';\n  modalSection.classList.add('visually-hidden');\n  document.removeEventListener('keydown', handleEscKey);\n  modalSection.removeEventListener('click', handleOverlayClick);\n  if (closeModalBtn) {\n    closeModalBtn.removeEventListener('click', closeModal);\n  }\n  modalContent.innerHTML = '';\n}\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  window.modalSection = modalSection;\n  window.modalOverlay = modalOverlay;\n  window.modalContent = modalContent;\n  window.closeModalBtn = closeModalBtn;\n  window.loader = loader;\n});\n\nexport { openModal };\n"],"names":["burgerBtn","mobileMenu","closeBtn","links","link","anchor","e","targetId","targetElement","axios","modalSection","modalOverlay","modalContent","closeModalBtn","loader"],"mappings":"svBACA,MAAMA,EAAY,SAAS,eAAe,WAAW,EAC/CC,EAAa,SAAS,eAAe,YAAY,EACjDC,EAAW,SAAS,eAAe,UAAU,EAC7CC,EAAQF,EAAW,iBAAiB,GAAG,EAE7CD,EAAU,iBAAiB,QAAS,IAAM,CACxCC,EAAW,UAAU,IAAI,QAAQ,CACnC,CAAC,EAEDC,EAAS,iBAAiB,QAAS,IAAM,CACvCD,EAAW,UAAU,OAAO,QAAQ,CACtC,CAAC,EAEDE,EAAM,QAAQC,GAAQ,CACpBA,EAAK,iBAAiB,QAAS,IAAM,CACnCH,EAAW,UAAU,OAAO,QAAQ,CACxC,CAAG,CACH,CAAC,EAGD,SAAS,iBAAiB,cAAc,EAAE,QAAQI,GAAU,CAC1DA,EAAO,iBAAiB,QAAS,SAAUC,EAAG,CAC5CA,EAAE,eAAc,EAEhB,MAAMC,EAAW,KAAK,aAAa,MAAM,EACnCC,EAAgB,SAAS,cAAcD,CAAQ,EAEjDC,GACFA,EAAc,eAAe,CAC3B,SAAU,SACV,MAAO,OACf,CAAO,CAEP,CAAG,CACH,CAAC,ECjCWC,EAAM,OAAO,CACvB,QAAS,sCACT,QAAS,IACT,QAAS,CACP,eAAgB,kBACjB,CACH,CAAC,ECLD,MAAMC,EAAe,SAAS,cAAc,wBAAwB,EAC9DC,EAAeD,EAAa,cAAc,sBAAsB,EAChEE,EAAeF,EAAa,cAAc,uBAAuB,EACjEG,EAAgBH,EAAa,cAAc,yBAAyB,EACpEI,EAAS,SAAS,eAAe,mBAAmB,EAkV1D,SAAS,iBAAiB,mBAAoB,IAAM,CAClD,OAAO,aAAeJ,EACtB,OAAO,aAAeC,EACtB,OAAO,aAAeC,EACtB,OAAO,cAAgBC,EACvB,OAAO,OAASC,CAClB,CAAC"}